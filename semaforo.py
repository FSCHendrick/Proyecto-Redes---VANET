import math
import time

class Semaforo:
    def __init__(self, id, x, y):
        self.id = id
        self.x = x
        self.y = y
        self.estado = "rojo"
        self.vehiculos_detectados = []
        self.ultimo_cambio = time.time()

        # Par√°metros de control
        self.min_tiempo_verde = 3      # segundos
        self.max_tiempo_verde = 8
        self.min_tiempo_rojo = 3
        self.prioridad_emergencia = False

    # ------------------------------------------------------------------
    def recibir_datos(self, mensaje):
        """Recibe los mensajes VANET enviados por los veh√≠culos."""
        self.vehiculos_detectados.append(mensaje)

    # ------------------------------------------------------------------
    def actualizar_estado(self):
        """
        Algoritmo de control adaptativo del sem√°foro:
        1Ô∏è‚É£ Si hay una emergencia ‚Üí verde inmediato.
        2Ô∏è‚É£ Si hay mucho tr√°fico (>=3 veh√≠culos) ‚Üí prolongar verde.
        3Ô∏è‚É£ Si no hay nadie ‚Üí mantener rojo.
        4Ô∏è‚É£ Evita cambios demasiado r√°pidos (usa tiempo m√≠nimo de fase).
        """
        ahora = time.time()
        tiempo_desde_ultimo = ahora - self.ultimo_cambio

        # --- Emergencias ---
        emergencias = [v for v in self.vehiculos_detectados if v["tipo"] == "emergencia"]
        if emergencias:
            if self.estado != "verde":
                print(f"üö® Sem√°foro {self.id}: prioridad a emergencia {emergencias[0]['id']}")
            self.estado = "verde"
            self.prioridad_emergencia = True
            self.ultimo_cambio = ahora
            return

        # --- Si hay emergencia reciente, mantener verde unos segundos m√°s ---
        if self.prioridad_emergencia and tiempo_desde_ultimo < self.min_tiempo_verde:
            self.estado = "verde"
            return
        else:
            self.prioridad_emergencia = False

        # --- An√°lisis de tr√°fico general ---
        total = len(self.vehiculos_detectados)
        if total == 0:
            # Si no hay veh√≠culos, mantener rojo si pas√≥ el m√≠nimo tiempo verde
            if self.estado == "verde" and tiempo_desde_ultimo > self.min_tiempo_verde:
                self.estado = "rojo"
                self.ultimo_cambio = ahora
            return

        # Contar por direcci√≥n
        por_direccion = {}
        for v in self.vehiculos_detectados:
            dir = v["direccion"]
            por_direccion[dir] = por_direccion.get(dir, 0) + 1

        # Direcci√≥n m√°s cargada
        direccion_max = max(por_direccion, key=por_direccion.get)
        cantidad = por_direccion[direccion_max]

        # --- Decisi√≥n din√°mica ---
        if cantidad >= 3:
            # M√°s tr√°fico: mantener verde m√°s tiempo
            if self.estado != "verde":
                print(f"üü¢ Sem√°foro {self.id}: mucho tr√°fico ({cantidad} veh√≠culos) ‚Üí verde")
            self.estado = "verde"
            self.ultimo_cambio = ahora
        elif cantidad == 1 or cantidad == 2:
            # Flujo moderado: alternar si pas√≥ tiempo m√≠nimo
            if self.estado == "verde" and tiempo_desde_ultimo > self.min_tiempo_verde:
                print(f"üî¥ Sem√°foro {self.id}: tr√°fico bajo ‚Üí rojo")
                self.estado = "rojo"
                self.ultimo_cambio = ahora
            elif self.estado == "rojo" and tiempo_desde_ultimo > self.min_tiempo_rojo:
                print(f"üü¢ Sem√°foro {self.id}: detecta {cantidad} veh√≠culos ‚Üí verde")
                self.estado = "verde"
                self.ultimo_cambio = ahora
        else:
            # Sin tr√°fico: mantener rojo
            if self.estado != "rojo":
                self.estado = "rojo"
                self.ultimo_cambio = ahora

    # ------------------------------------------------------------------
    def limpiar_datos(self):
        """Limpia la lista de veh√≠culos detectados para el siguiente ciclo."""
        self.vehiculos_detectados = []
